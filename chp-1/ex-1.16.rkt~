#lang scheme
(require rackunit)

(define (fast-expt-old b n)
  (cond ((= n 0)
         1)
        ((even? n)
         (square (fast-expt b (/ n 2))))
        (else
         (* b (fast-expt b (- n 1))))))
          

(define square (lambda (x) (* x x)))

(define (fast-expt b n)
  (fast-expt-iter b n 1))

(define (fast-expt-iter b counter a)
  (cond ((= n 0) a)
        ((even? n)
         (fast-expt-iter b (/ counter 2) (* a (square b))))
        (else
         (* b (fast-expt b (- n 1))))))


(check-eq? (fast-expt 2 8) 256)
(check-eq? (fast-expt 3 45) 2954312706550833698643)
(check-eq? (fast-expt 4 0) 1)
(check-eq? (fast-expt 4 1) 4)