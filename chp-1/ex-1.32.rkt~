#lang sicp
(#%require rackunit)


;Exercise 1.32
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a) (accumulate combiner null-value term (next a) next b))))

(define (sum term a next b)
  (accumulate + 0 term a next b))



; CHECKING OUR SOLUTIION

(define (inc n) (+ n 1))
(define (cube x) (* x x x))

(define (sum-cubes a b)
  (sum cube a inc b))


; testing if both sum method give the same result
(check-eq? (sum-cubes 2 3) 35)
(check-eq? (sum-cubes 2 4) 99)

; Now Writing Iterative accumulator
(define (accumulate-i combiner null-value term a next b)
  (define (iter-helper a result)
    (if (> a b)
        result
        (iter-helper (next a) (combiner result (term a)))))
  (iter-helper a null-value))

(define (product term a next b)
  (accumulate-i * 1 term a next b))

;CHECKING OUR ITERATIVE SOLUTION


(define (identity x) x)


(define (factorial n)
(product identity 1 inc n))

(check-eq? (factorial 1) 1)
(check-eq? (factorial 2) 2)
(check-eq? (factorial 3) 6)
(check-eq? (factorial 4) 24)